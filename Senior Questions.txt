
1) В каком домене Domain были задачи ? Medical домент.
2) С каким технологиями работал .NET Framework или .NET Core ? 
3) Какие методы рефакторинга ты бы предложил ? (нужно больше внедрения зависимостей)
4) Как антипаттерны можно превратить в что то хорошее ?
5) SOLID что такое, как юзать как использовать ?
6) Как описать типовой пример нарушения принципа Single Responsibility ?
7) Не смешивать бизнес логику и инфраструктуру.
8) Нарушение кода OCP Open Close принципа пример нарущения. (не менять код или использовать sub классы или интерфейсы)
   (Нарушение видно когда в наследниках не согласованное поведение)
9) 4 принцип солид -  не лепить много методов в интерфейсы а дробить интерфейси что бы наследники иплементили которые он хочет интерфейсы (что бы не имплементить лишнее)

10) Принципы без которых ты не напишишь юнит тесты ? 
- Без принципа Dependency Inversion (если зависемости будут создаваться, а не инжектится, то юнит тесты будет написать очень сложно)
11) Если есть зависимость на статику, как написать юнит тест на такой метод ? Враппер написать свой собственный на статику и замокать (в реализации этого интерфейса будет вызовать статик метод)
12) GoF паттерны, какие приминял. Порождающие Структурные Поведенчиские, по одному из каждой группы
13) Паттерн Мост (Bridge)
14) GRASP дизайн - Low Coupling, High Cohesion, Polymorphism, Pure Fabrication
15) Базы даннык, какие использовал ? разница SQL и NoSQL когда и что использовать
16) Serverless подход, какие проблемы (холодный и горячий старт) (самый холодный на джаве), код должен выполнятся максимально быстро в функциях. (в Сервис плане можно уменьший время холодного старта)
17) SQL базы, принцип ACID, рассказать об этом. Атомарность в транзакциях. Consistency данные должны быть согласованны Isolation - транзакция должны быть изолированны 
ACID - требования к транзакционной системе

4-5 уровней транзакций в SQL базе есть 
4 - минимум уровня изоляции в SQL базе
5 - не во всех базах есть столько
Фантомы - это такие штуки что в рамках транзхакции может что то создаватся или удалятся и другая транзакция может их получить
Serialazble уровнь помогает избавется это фантомов в базе
18) CAP теорема для расспределенных систем. (часто в микросервесной системе юзается)
19) Триггеры в SQL
20) REST принципы, Идемпотентность в REST API - части HTTP (Verbs) методов Идемпотентность а часть не идемпотентность
21) 
  Доменные микросервисы DDD - Domain Driven Development - каждый микросервис строится вокгур какой то доменной сузности User, Account, Employee
  Инфраструктурные микросервисы - Logger, Audit, Getway или что то что могу все использовать 
22) CDN

23) алгоритмы хеширования - Sha1 SHA256, шифрования - симетричное и асиметричное
